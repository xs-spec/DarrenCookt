#!/usr/bin/env python
#
# h2olog - A BPF-backed request logging client for the H2O server.
#
# USAGE: $ sudo h2olog -p $(pgrep -o h2o)
#
# Copyright 2019 Fastly, Toru Maesaka

from __future__ import print_function
from bcc import BPF, USDT, __version__ as bcc_version
from collections import OrderedDict
import binascii, getopt, json, sys, time, os, platform

version = "0.0.1"

perf_ring_buffer_page_cnt = 256 # overridden by -P=N

# sudo itself if it is not running as root
if os.geteuid() != 0:
    os.execvp("sudo", ["-E", sys.executable] + sys.argv)

default_bpf = """
#define MAX_STR_LEN 128

/*
 * "trace_line_t" is a general structure to store the data emitted by
 * USDT probes. This structure is pushed into the BPF ring buffer.
 */
struct trace_line_t {
    u64 conn_id;
    u64 req_id;
    u32 http_version;
    u32 http_status;
    u64 header_name_len;
    u64 header_value_len;
    char header_name[MAX_STR_LEN];
    char header_value[MAX_STR_LEN];
};

BPF_PERF_OUTPUT(rxbuf);
BPF_PERF_OUTPUT(txbuf);

int trace_receive_req(struct pt_regs *ctx) {
    struct trace_line_t line = {};

    bpf_usdt_readarg(1, ctx, &line.conn_id);
    bpf_usdt_readarg(2, ctx, &line.req_id);
    bpf_usdt_readarg(3, ctx, &line.http_version);

    if (rxbuf.perf_submit(ctx, &line, sizeof(line)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_receive_req_header(struct pt_regs *ctx) {
    struct trace_line_t line = {};
    void *pos = NULL;

    bpf_usdt_readarg(1, ctx, &line.conn_id);
    bpf_usdt_readarg(2, ctx, &line.req_id);

    // Extract the Header Name
    bpf_usdt_readarg(3, ctx, &pos);
    bpf_usdt_readarg(4, ctx, &line.header_name_len);
    bpf_probe_read(&line.header_name, sizeof(line.header_name), pos);

    // Extract the Header Value
    bpf_usdt_readarg(5, ctx, &pos);
    bpf_usdt_readarg(6, ctx, &line.header_value_len);
    bpf_probe_read(&line.header_value, sizeof(line.header_value), pos);

    if (rxbuf.perf_submit(ctx, &line, sizeof(line)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_send_resp(struct pt_regs *ctx) {
    struct trace_line_t line = {};

    bpf_usdt_readarg(1, ctx, &line.conn_id);
    bpf_usdt_readarg(2, ctx, &line.req_id);
    bpf_usdt_readarg(3, ctx, &line.http_status);

    if (txbuf.perf_submit(ctx, &line, sizeof(line)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}
"""

quic_bpf = """
#define MAX_STR_LEN 32
#define MAX_HEADER_VALUE_LEN 64
#define TOKEN_PREVIEW_LEN 8

#include <linux/kernel.h>

#define INIT_EVENT_NAME(event) do { \\
        sprintf((event).type, __func__ + (sizeof("trace_") -1)); \\
    } while (0)

struct st_quicly_conn_t {
    u32 dummy[4];
    u32 master_id;
};

struct st_h2o_conn_t {
    void *dummy_ctx;
    void **dummy_hosts;
    u64 dummy_connected_at[2];
    u64 conn_id;
};

struct quic_event_t {
    char type[MAX_EVENT_TYPE_LEN];

    // from quicly
    char dcid[MAX_STR_LEN];
    char token_preview[TOKEN_PREVIEW_LEN];
    u64 at;
    u32 master_conn_id;
    u64 stream_id;
    u64 error_code;
    u64 packet_num;
    u64 packet_len;
    u8 packet_type;
    u64 frame_type;
    u32 ack_only;
    u64 largest_acked;
    u64 bytes_acked;
    u64 ack_delay;
    u64 inflight;
    u64 max_lost_pn;
    u32 cwnd;
    u8 first_octet;
    u32 newly_acked;
    u32 new_version;
    u64 len;
    u64 token_generation;
    u64 limit;
    u64 off;
    u32 is_unidirectional;
    u32 ret;

    // from h2o
    u64 h2o_conn_id;
    u64 h2o_req_id;
    char h2o_header_name[MAX_STR_LEN];
    char h2o_header_value[MAX_HEADER_VALUE_LEN];
};

// defining it to calculate the size of h2o specific data.
struct h2o_event_t {
    u64 h2o_conn_id;
    u64 h2o_req_id;
    char h2o_header_name[MAX_STR_LEN];
    char h2o_header_value[MAX_HEADER_VALUE_LEN];
};

BPF_PERF_OUTPUT(events);

int trace_quicly__accept(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &pos);
    bpf_probe_read(&event.dcid, MAX_STR_LEN, pos);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__receive(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &pos);
    bpf_probe_read(&event.dcid, MAX_STR_LEN, pos);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__version_switch(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.new_version);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__idle_timeout(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__stateless_reset_receive(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__crypto_decrypt(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.packet_num);
    bpf_usdt_readarg(4, ctx, &event.len);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__crypto_handshake(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.ret);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__packet_prepare(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.first_octet);
    bpf_usdt_readarg(4, ctx, &pos);
    bpf_probe_read(&event.dcid, MAX_STR_LEN, pos);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__packet_commit(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.packet_num);
    bpf_usdt_readarg(4, ctx, &event.packet_len);
    bpf_usdt_readarg(5, ctx, &event.ack_only);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__packet_acked(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.packet_num);
    bpf_usdt_readarg(4, ctx, &event.newly_acked);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__packet_lost(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.packet_num);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__cc_ack_received(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.largest_acked);
    bpf_usdt_readarg(4, ctx, &event.bytes_acked);
    bpf_usdt_readarg(5, ctx, &event.cwnd);
    bpf_usdt_readarg(6, ctx, &event.inflight);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__cc_congestion(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.max_lost_pn);
    bpf_usdt_readarg(4, ctx, &event.inflight);
    bpf_usdt_readarg(5, ctx, &event.cwnd);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__transport_close_send(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.frame_type);

    return 0;
}

int trace_quicly__transport_close_receive(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.error_code);
    bpf_usdt_readarg(4, ctx, &event.frame_type);

    return 0;
}

int trace_quicly__application_close_send(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.error_code);

    return 0;
}

int trace_quicly__new_token_send(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &pos);
    bpf_probe_read(&event.token_preview, TOKEN_PREVIEW_LEN, pos);
    bpf_usdt_readarg(4, ctx, &event.len);
    bpf_usdt_readarg(5, ctx, &event.token_generation);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__new_token_acked(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.token_generation);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__new_token_receive(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &pos);
    bpf_probe_read(&event.token_preview, TOKEN_PREVIEW_LEN, pos);
    bpf_usdt_readarg(4, ctx, &event.len);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__streams_blocked_send(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.limit);
    bpf_usdt_readarg(4, ctx, &event.is_unidirectional);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__streams_blocked_receive(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.limit);
    bpf_usdt_readarg(4, ctx, &event.is_unidirectional);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__data_blocked_receive(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.off);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__stream_data_blocked_receive(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.stream_id);
    bpf_usdt_readarg(4, ctx, &event.limit);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__quictrace_sent(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.packet_num);
    bpf_usdt_readarg(4, ctx, &event.packet_len);
    bpf_usdt_readarg(5, ctx, &event.packet_type);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__quictrace_recv(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.packet_num);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__quictrace_recv_ack_delay(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.ack_delay);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_quicly__quictrace_lost(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;
    bpf_usdt_readarg(2, ctx, &event.at);
    bpf_usdt_readarg(3, ctx, &event.packet_num);

    if (events.perf_submit(ctx, &event, sizeof(event) - sizeof(struct h2o_event_t)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

#ifdef ENABLE_H2O_PROBES
BPF_HASH(h2o_to_quicly_conn, u64, u32);

int trace_h2o__send_response_header(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    size_t name_len = 0;
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &event.h2o_conn_id);

    const u32 *master_conn_id_ptr = h2o_to_quicly_conn.lookup(&event.h2o_conn_id);
    if (master_conn_id_ptr == NULL)
        return 0;
    event.master_conn_id = *master_conn_id_ptr;

    bpf_usdt_readarg(2, ctx, &event.h2o_req_id);
    bpf_usdt_readarg(3, ctx, &pos);
    bpf_usdt_readarg(4, ctx, &name_len);
    bpf_probe_read(&event.h2o_header_name, MAX_STR_LEN, pos);

#ifdef CHECK_ALLOWED_RES_HEADER_NAME
    if (!CHECK_ALLOWED_RES_HEADER_NAME(event.h2o_header_name, name_len)) {
        return 0;
    }
#endif

    bpf_usdt_readarg(5, ctx, &pos);
    // ignore arg 6 (value_len)
    bpf_probe_read(&event.h2o_header_value, MAX_HEADER_VALUE_LEN, pos);

    if (events.perf_submit(ctx, &event, sizeof(event)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_h2o__h3_accept(struct pt_regs *ctx) {
    void *pos = NULL;
    struct quic_event_t event = {};
    struct st_quicly_conn_t conn = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &event.h2o_conn_id);
    // ignore arg 2 (struct st_h2o_conn_t*)
    bpf_usdt_readarg(3, ctx, &pos);
    bpf_probe_read(&conn, sizeof(conn), pos);
    event.master_conn_id = conn.master_id;

    h2o_to_quicly_conn.update(&event.h2o_conn_id, &event.master_conn_id);

    if (events.perf_submit(ctx, &event, sizeof(event)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}

int trace_h2o__h3_close(struct pt_regs *ctx) {
    struct quic_event_t event = {};
    INIT_EVENT_NAME(event);

    bpf_usdt_readarg(1, ctx, &event.h2o_conn_id);

    const u32 *master_conn_id_ptr = h2o_to_quicly_conn.lookup(&event.h2o_conn_id);
    if (master_conn_id_ptr != NULL) {
        event.master_conn_id = *master_conn_id_ptr;
    } else {
        bpf_trace_printk("h2o_conn_id=%lu is not associated to master_conn_id\\n", event.h2o_conn_id);
    }
    h2o_to_quicly_conn.delete(&event.h2o_conn_id);

    if (events.perf_submit(ctx, &event, sizeof(event)) < 0)
        bpf_trace_printk("failed to perf_submit\\n");

    return 0;
}
#endif /* ENABLE_H2O_PROBES */
"""

# Hack to make it work both on python2 and python3
if sys.version_info.major >= 3:
    def s(thingy):
        if isinstance(thingy, bytes):
            return thingy.decode("utf-8")
        else:
            return thingy
else:
    def s(thingy):
        return thingy


def handle_req_line(cpu, data, size):
    line = b["rxbuf"].event(data)
    if line.http_version:
        v = "HTTP/%d.%d" % (line.http_version / 256, line.http_version % 256)
        print("%u %u RxProtocol %s" % (line.conn_id, line.req_id, v))
    else:
        hn = line.header_name[:line.header_name_len]
        hv = line.header_value[:line.header_value_len]
        print("%u %u RxHeader   %s %s" % (line.conn_id, line.req_id, s(hn), s(hv)))

def handle_resp_line(cpu, data, size):
    line = b["txbuf"].event(data)
    print("%u %u TxStatus   %d" % (line.conn_id, line.req_id, line.http_status))

def load_common_fields(hsh, line):
    at = line.at
    if at == 0:
        at = int(time.time() * 1000)
    hsh["at"] = at
    fully_qualified_type = line.type.replace("__", ":", 1)
    hsh["type"] = fully_qualified_type
    hsh["master_conn_id"] = line.master_conn_id

def build_quic_trace_result(res, event, fields):
    for k in fields:
        res[k] = s(getattr(event, k))
        if k == "token_preview":
            res[k] = binascii.hexlify(res[k])
    return res

def handle_quic_event(cpu, data, size):
    ev = b["events"].event(data)
    if len(allowed_quic_event) > 0 and ev.type not in allowed_quic_event:
        return

    res = OrderedDict()
    load_common_fields(res, ev)

    if ev.type == "quicly__accept":
        build_quic_trace_result(res, ev, ["dcid"])
    elif ev.type == "quicly__receive":
        build_quic_trace_result(res, ev, ["dcid"])
    elif ev.type == "quicly__version_switch":
        build_quic_trace_result(res, ev, ["new_version"])
    elif ev.type == "quicly__crypto_decrypt":
        build_quic_trace_result(res, ev, ["packet_num", "len"])
    elif ev.type == "quicly__crypto_handshake":
        build_quic_trace_result(res, ev, ["ret"])
    elif ev.type == "quicly__packet_prepare":
        build_quic_trace_result(res, ev, ["first_octet", "dcid"])
    elif ev.type == "quicly__packet_commit":
        build_quic_trace_result(res, ev, ["packet_num", "packet_len", "ack_only"])
    elif ev.type == "quicly__packet_acked":
        build_quic_trace_result(res, ev, ["packet_num", "newly_acked"])
    elif ev.type == "quicly__packet_lost":
        build_quic_trace_result(res, ev, ["packet_num"])
    elif ev.type == "quicly__cc_ack_received":
        build_quic_trace_result(res, ev, ["largest_acked", "bytes_acked", "cwnd", "inflight"])
    elif ev.type == "quicly__cc_congestion":
        build_quic_trace_result(res, ev, ["max_lost_pn", "inflight", "cwnd"])
    elif ev.type == "quicly__transport_close_send":
        build_quic_trace_result(res, ev, ["frame_type"])
    elif ev.type == "quicly__transport_close_receive":
        build_quic_trace_result(res, ev, ["error_code", "frame_type"])
    elif ev.type == "quicly__application_close_send":
        build_quic_trace_result(res, ev, ["error_code"])
    elif ev.type == "quicly__new_token_send":
        build_quic_trace_result(res, ev, ["token_preview", "len", "token_generation"])
    elif ev.type == "quicly__new_token_acked":
        build_quic_trace_result(res, ev, ["token_generation"])
    elif ev.type == "quicly__streams_blocked_send":
        build_quic_trace_result(res, ev, ["limit", "is_unidirectional"])
    elif ev.type == "quicly__streams_blocked_receive":
        build_quic_trace_result(res, ev, ["limit", "is_unidirectional"])
    elif ev.type == "quicly__data_blocked_receive":
        build_quic_trace_result(res, ev, ["off"])
    elif ev.type == "quicly__stream_data_blocked_receive":
        build_quic_trace_result(res, ev, ["stream_id", "limit"])
    elif ev.type == "quicly__quictrace_sent":
        build_quic_trace_result(res, ev, ["packet_num", "packet_len", "packet_type"])
    elif ev.type == "quicly__quictrace_recv":
        build_quic_trace_result(res, ev, ["packet_num"])
    elif ev.type == "quicly__quictrace_recv_ack_delay":
        build_quic_trace_result(res, ev, ["ack_delay"])
    elif ev.type == "quicly__quictrace_lost":
        build_quic_trace_result(res, ev, ["packet_num"])
    elif ev.type == "h2o__send_response_header":
        build_quic_trace_result(res, ev, ["h2o_conn_id", "h2o_req_id", "h2o_header_name", "h2o_header_value"])
    elif ev.type == "h2o__h3_accept":
        build_quic_trace_result(res, ev, ["h2o_conn_id"])
    elif ev.type == "h2o__h3_close":
        build_quic_trace_result(res, ev, ["h2o_conn_id"])
    print(json.dumps(res, separators = (',', ':')))

def usage():
    print("""
USAGE: h2olog -p PID
       h2olog quic -p PID
       h2olog quic -t event_type -p PID
       h2olog quic -v -s response_header_name -p PID

Other options:
    -P [int] The size of the perf ring buffer. Default to 256.
    -h Shows this help and exit.
    -d Shows the BPF program and exit.

h2olog version %s
Platform: %s
BCC: %s
""".strip() % (version, platform.platform(), bcc_version))
    exit()

def trace_http():
    b["rxbuf"].open_perf_buffer(handle_req_line, page_cnt=perf_ring_buffer_page_cnt)
    b["txbuf"].open_perf_buffer(handle_resp_line, page_cnt=perf_ring_buffer_page_cnt)

    while 1:
        try:
            b.perf_buffer_poll()
        except KeyboardInterrupt:
            exit()

def trace_quic():
    b["events"].open_perf_buffer(handle_quic_event, page_cnt=perf_ring_buffer_page_cnt)
    while 1:
        try:
            b.perf_buffer_poll()
        except KeyboardInterrupt:
            exit()

def get_event_type_len(usdt, providers):
    providers_set = set(providers)
    probes = filter(lambda probe: probe.provider in providers_set, usdt.enumerate_probes())
    return 1 + max(map(lambda probe: len("%s__%s" % (probe.provider, probe.name)), probes))

def generate_filter_cflag(candidates):
    conditions = []
    for candidate in candidates:
        exprs = ["/* %s */ (l) == %d" % (candidate, len(candidate))]
        for i, c in enumerate(candidate):
            exprs.append("(s)[%d] == '%s'" % (i, c))
        conditions.append("(%s)" % " && ".join(exprs))

    return "-DCHECK_ALLOWED_RES_HEADER_NAME(s,l)=(%s)" % " || ".join(conditions)

def is_power_of_two(n):
    return (n > 0) and (n & (n-1) == 0)

def is_valid_page_cnt(s):
    try:
        n = int(s)
        return is_power_of_two(n)
    except:
        return False

if len(sys.argv) < 1:
    usage()

tracer_func = trace_http
optidx = 1
if len(sys.argv) > 1 and sys.argv[1] == "quic":
    tracer_func = trace_quic
    optidx = 2

try:
    h2o_pid = 0
    allowed_quic_event = set()
    allowed_res_header_name = set()
    verbose = False
    debug = False
    opts, args = getopt.getopt(sys.argv[optidx:], 'hvp:t:s:dP:')
    for opt, arg in opts:
        if opt == "-h":
            usage()
        elif opt == "-p":
            h2o_pid = arg
        elif opt == "-t":
            allowed_quic_event.update(arg.replace(":", "__", 1).split(","))
        elif opt == "-v":
            verbose = True
        elif opt == "-s": # reSponse
            allowed_res_header_name.update(arg.lower().split(","))
        elif opt == "-d": # Debug
            debug = True
        elif opt == "-P":
            if not is_valid_page_cnt(arg):
                print("Invalid value for -P, which must be a power of two: %s" % arg, file=sys.stderr)
                sys.exit(1)
            perf_ring_buffer_page_cnt = int(arg)


except getopt.error as msg:
    print(msg)
    sys.exit(2)

if h2o_pid == 0:
    usage()

u = USDT(pid=int(h2o_pid))

if sys.argv[1] == "quic":
    # provider qiucly:
    u.enable_probe(probe="accept", fn_name="trace_quicly__accept")
    u.enable_probe(probe="receive", fn_name="trace_quicly__receive")
    u.enable_probe(probe="version_switch", fn_name="trace_quicly__version_switch")
    u.enable_probe(probe="idle_timeout", fn_name="trace_quicly__idle_timeout")
    u.enable_probe(probe="stateless_reset_receive", fn_name="trace_quicly__stateless_reset_receive")
    u.enable_probe(probe="crypto_decrypt", fn_name="trace_quicly__crypto_decrypt")
    u.enable_probe(probe="crypto_handshake", fn_name="trace_quicly__crypto_handshake")
    u.enable_probe(probe="packet_prepare", fn_name="trace_quicly__packet_prepare")
    u.enable_probe(probe="packet_commit", fn_name="trace_quicly__packet_commit")
    u.enable_probe(probe="packet_acked", fn_name="trace_quicly__packet_acked")
    u.enable_probe(probe="packet_lost", fn_name="trace_quicly__packet_lost")
    u.enable_probe(probe="cc_ack_received", fn_name="trace_quicly__cc_ack_received")
    u.enable_probe(probe="cc_congestion", fn_name="trace_quicly__cc_congestion")
    u.enable_probe(probe="transport_close_send", fn_name="trace_quicly__transport_close_send")
    u.enable_probe(probe="transport_close_receive", fn_name="trace_quicly__transport_close_receive")
    u.enable_probe(probe="application_close_send", fn_name="trace_quicly__application_close_send")
    u.enable_probe(probe="new_token_send", fn_name="trace_quicly__new_token_send")
    u.enable_probe(probe="new_token_acked", fn_name="trace_quicly__new_token_acked")
    u.enable_probe(probe="new_token_receive", fn_name="trace_quicly__new_token_receive")
    u.enable_probe(probe="streams_blocked_send", fn_name="trace_quicly__streams_blocked_send")
    u.enable_probe(probe="streams_blocked_receive", fn_name="trace_quicly__streams_blocked_receive")
    u.enable_probe(probe="data_blocked_receive", fn_name="trace_quicly__data_blocked_receive")
    u.enable_probe(probe="stream_data_blocked_receive", fn_name="trace_quicly__stream_data_blocked_receive")
    u.enable_probe(probe="quictrace_sent", fn_name="trace_quicly__quictrace_sent")
    u.enable_probe(probe="quictrace_recv", fn_name="trace_quicly__quictrace_recv")
    u.enable_probe(probe="quictrace_recv_ack_delay", fn_name="trace_quicly__quictrace_recv_ack_delay")
    u.enable_probe(probe="quictrace_lost", fn_name="trace_quicly__quictrace_lost")

    cflags = ["-DMAX_EVENT_TYPE_LEN=%s" % get_event_type_len(u, ["h2o", "quicly"])]

    # provider h2o:
    if verbose:
        u.enable_probe(probe="send_response_header", fn_name="trace_h2o__send_response_header")
        u.enable_probe(probe="h3_accept", fn_name="trace_h2o__h3_accept")
        u.enable_probe(probe="h3_close", fn_name="trace_h2o__h3_close")
        cflags.append("-DENABLE_H2O_PROBES")
        if len(allowed_res_header_name):
            cflags.append(generate_filter_cflag(allowed_res_header_name))

    bpf = quic_bpf
else:
    u.enable_probe(probe="receive_request", fn_name="trace_receive_req")
    u.enable_probe(probe="receive_request_header", fn_name="trace_receive_req_header")
    u.enable_probe(probe="send_response", fn_name="trace_send_resp")
    cflags = []
    bpf = default_bpf

if debug:
    print("/* cflags = %s */" % " ".join(cflags))
    print(bpf)
    sys.exit()

b = BPF(text=bpf, usdt_contexts=[u], cflags=cflags)

tracer_func()
