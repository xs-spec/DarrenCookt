#! /usr/bin/perl

use strict;
use warnings;
use List::Util qw(max);
use List::MoreUtils qw(uniq);
use Text::MicroTemplate qw(render_mt);

my @tokens = map { chomp $_; [ split /\s+/, $_, 2 ] } <DATA>;

# output source
open my $fh, '>', 'src/http2/hpack_static_table.h'
    or die "failed to open src/hpack_static_table.h:$!";
print $fh render_mt(<< 'EOT', \@tokens)->as_string;
? my $tokens = shift;
/* automatically generated by hpack.pl */

static const struct st_h2o_hpack_static_table_entry_t h2o_hpack_static_table[<?= scalar @$tokens ?>] = {
? for my $i (0..$#$tokens) {
    { <?= normalize_name($tokens->[$i][0]) ?>, { H2O_STRLIT("<?= $tokens->[$i][1] || "" ?>") } }<?= $i == $#$tokens ? "" : "," ?>
? }
};
EOT
close $fh;

sub normalize_name {
    my $n = shift;
    $n =~ s/^://;
    $n =~ s/-/_/g;
    $n =~ tr/a-z/A-Z/;
    "H2O_TOKEN_$n";
}

__DATA__
:authority 	
:method 	GET
:method 	POST
:path 	/
:path 	/index.html
:scheme 	http
:scheme 	https
:status		200
:status 	204
:status 	206
:status 	304
:status 	400
:status 	404
:status 	500
accept-charset 	
accept-encoding 	gzip, deflate
accept-language 	
accept-ranges 	
accept 	
access-control-allow-origin 	
age 	
allow 	
authorization 	
cache-control 	
content-disposition 	
content-encoding 	
content-language 	
content-length 	
content-location 	
content-range 	
content-type 	
cookie 	
date 	
etag 	
expect 	
expires 	
from 	
host 	
if-match 	
if-modified-since 	
if-none-match 	
if-range 	
if-unmodified-since 	
last-modified 	
link 	
location 	
max-forwards 	
proxy-authenticate 	
proxy-authorization 	
range 	
referer 	
refresh 	
retry-after 	
server 	
set-cookie 	
strict-transport-security 	
transfer-encoding 	
user-agent 	
vary 	
via 	
www-authenticate
